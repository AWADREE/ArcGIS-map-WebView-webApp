import{de as p,s,ay as i}from"./index-DlMccc_Y.js";import{l as n}from"./MeshVertexAttributes-C1H2ubvn.js";import{M as a}from"./vertexSpaceConversion-5FQZ8Y_F.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-Dz5M-kWE.js";import"./computeTranslationToOriginAndRotation-uk0fdMZj.js";import"./meshVertexSpaceUtils-3HkuH4jc.js";import"./MeshLocalVertexSpace-Bq7tNy3n.js";import"./vec3-D5-9EUIr.js";import"./projection-Xj9yqqKC.js";import"./DoubleArray-Dj59r4dG.js";import"./BufferView-BwFZGjjq.js";import"./vec4-BH35wTGw.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
