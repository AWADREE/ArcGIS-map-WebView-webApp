import{M as j,N as z,Q as G,R as A,S as B,T as C,U as D,W as E,X as L,Y as N}from"./index-DlMccc_Y.js";import{r as Q}from"./vec3f32-nZdmKIgz.js";import{n as T,h as U}from"./WGLContainer-CEufPFsY.js";import{E as X}from"./Container-__XNuNjS.js";class J extends T{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=j()}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const s of this.children)s.beforeRender(e)}prepareRenderPasses(e){const s=e.registerRenderPass({name:"overlay",brushes:[U.overlay],target:()=>this.children,drawPhase:X.MAP});return[...super.prepareRenderPasses(e),s]}_updateMatrices(e){const{state:s}=e,{id:a,size:d,pixelRatio:r,resolution:h,rotation:l,viewpoint:u,displayMat3:_}=s;if(this._viewStateId===a)return;const p=Math.PI/180*l,i=r*d[0],n=r*d[1];this._localOrigin=u.targetGeometry.clone();const{x:c,y:v}=this._localOrigin,M=z(c,s.spatialReference);this._localOrigin.x=M,this._localOrigin.y=v;const m=h*i,g=h*n,t=G(this._dvsMat3);A(t,t,_),B(t,t,C(i/2,n/2)),D(t,t,Q(i/m,-n/g,1)),E(t,t,-p),this._viewStateId=a}_updateOverlays(e,s){const{state:a}=e,{rotation:d,spatialReference:r,worldScreenWidth:h,size:l,viewpoint:u}=a,_=this._localOrigin;let p,i=0;const n=L(r);if(n&&r.isWrappable){const c=l[0],v=l[1],M=180/Math.PI*d,m=Math.abs(Math.cos(M)),g=Math.abs(Math.sin(M)),t=Math.round(c*m+v*g),[x,b]=n.valid,o=N(r),{x:O,y:I}=u.targetGeometry,S=[O,I],w=[0,0];a.toScreen(w,S);const f=[0,0];let y;y=t>h?.5*h:.5*t;const P=Math.floor((O+.5*o)/o),W=x+P*o,$=b+P*o,R=[w[0]+y,0];a.toMap(f,R),f[0]>$&&(i=o),R[0]=w[0]-y,a.toMap(f,R),f[0]<W&&(i=-o),p={worldWidth:o,xBounds:[x,b]}}for(const c of s)c.updateDrawCoords(_,i,r,p)}}export{J as f};
